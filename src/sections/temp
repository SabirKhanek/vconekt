import { HTMLProps, useEffect, useRef, useState } from "react";
import {
  getResponsiveClasses,
  //   getResponsiveWidth,
} from "../shared/constants/getResponsiveClasses";
// import { Button } from "../components/button";
import { useGSAP } from "@gsap/react";
import SplitType from "split-type";
import gsap from "gsap";
import { usePreloader } from "../shared/contexts/preloader";
import { progress } from "framer-motion";

export function OurServices({ ...props }: HTMLProps<HTMLElement>) {
  const sliderContainerRef = useRef<HTMLDivElement>(null);
  useGSAP(() => {
    const cursorTimeline = gsap.timeline({ repeat: -1, yoyo: true });
    cursorTimeline.to(".type_cursor", { opacity: 0.2, duration: 0.5 });
    new SplitType("#presence_text", {
      types: "chars",
      charClass: "presence_text_letter",
    });
    const textTimeline = gsap.timeline({
      repeat: -1,
      yoyo: true,
      repeatDelay: 1,
    });
    textTimeline.fromTo(
      ".presence_text_letter",
      { display: "none" },
      {
        display: "inline-block",
        duration: 0.01,
        stagger: 0.04,
      }
    );
  }, []);
  const calcCardWidth = () => {
    const slider = document.getElementById("service_slider");
    return ((slider?.clientWidth || 1260) / 3) * (4 / 5);
  };
  const [cardWidth, setCardWidth] = useState(calcCardWidth());

  useEffect(() => {
    setCardWidth(calcCardWidth());
  }, []);

  useGSAP(() => {
    const slider = document.getElementById("service_slider");
    if (!slider) return;
    const targets = Array.from(
      document.querySelectorAll(".service-card")
    ).reverse();

    const tl = gsap.timeline({
      scrollTrigger: {
        trigger: "#our_services",
        start: "top top",
        endTrigger: "#our_services",
        end: "bottom bottom",
        pin: true,
        pinnedContainer: "#our_services_content",
        scrub: true,
        markers: true,
        pinReparent: true,
        snap: [
          0,
          ...targets.map((v, index) => {
            v;
            return 0.125 * (index + 1);
          }),
        ],
      },
    });
    const animationProps = {
      start: {
        x: 0,
        y: 0,
        backgroundColor: "blue",
        scale: 1,
      },
      center: {
        x: slider.clientWidth / 2 - cardWidth / 2,
        y: -(slider.clientHeight - cardWidth),
        backgroundColor: "red",
        scale: 1.2,
      },
      end: {
        x: slider.clientWidth - cardWidth,
        y: 0,
        backgroundColor: "blue",
        scale: 1,
      },
    };
    const radius = slider.clientWidth / 3;
    const dur = 2;
    var controlPoint1 = {
      x: animationProps.center.x - radius,
      y: animationProps.center.y / 2,
    };
    var controlPoint2 = {
      x: animationProps.center.x + radius,
      y: animationProps.center.y / 2,
    };

    const getInterpolations = (startObj: any, endObj: any, progress: any) => {
      const interpolations: any = {};
      Object.keys(startObj).forEach((key) => {
        interpolations[key] = gsap.utils.interpolate(
          startObj[key],
          endObj[key],
          progress
        );
      });
      return interpolations;
    };

    gsap.utils.toArray(targets).forEach((target: any, index) => {
      tl.fromTo(
        target,
        {
          x: animationProps.start.x,
          y: animationProps.start.y,
          backgroundColor: animationProps.start.backgroundColor,
          zIndex: targets.length - index,
        },
        {
          motionPath: {
            path: [
              controlPoint1,
              { x: animationProps.center.x, y: animationProps.center.y }, // Control Point 1
              controlPoint2,
              { x: animationProps.end.x, y: animationProps.end.y },
            ],
          },
          onUpdate: () => {
            const totalTime = dur * targets.length;
            const timeWithDelay = tl.duration();
            const delayProgress = tl.progress();

            const actualCurrentTime = timeWithDelay * delayProgress;
            const totalCurrentTime = actualCurrentTime + (dur / 2) * index;
            // const totalTimeProgress = totalCurrentTime / totalTime;
            //const totalTimeProgress = 0 // please map delayProgress (based on timeWithDelay) to totalTimeProgress (based on totalTime)
            const startTimeForTarget = index * dur;
            const currentTimeTarget = totalCurrentTime - startTimeForTarget;
            const progress = currentTimeTarget / dur; // want to get progress of individual tween keep in mind -=${dur/2}
            if (progress <= -1 || progress > 1) return;

            let zindex;
            let interpolations: any = {};
            if (progress < 0.5) {
              interpolations = getInterpolations(
                {
                  backgroundColor: animationProps.start.backgroundColor,
                  scale: animationProps.start.backgroundColor,
                },
                {
                  backgroundColor: animationProps.center.backgroundColor,
                  scale: animationProps.center.scale,
                },
                progress * 2
              );
              // interPolatedColor = gsap.utils.interpolate(
              //   animationProps.start.backgroundColor,
              //   animationProps.center.backgroundColor,
              //   progress * 2
              // );
              // interPolatedScale = gsap.utils.interpolate(
              //   animationProps.start.scale,
              //   animationProps.center.scale,
              //   progress * 2
              // );
              zindex = targets.length - index;
            } else {
              interpolations = getInterpolations(
                {
                  backgroundColor: animationProps.center.backgroundColor,
                  scale: animationProps.end.backgroundColor,
                },
                {
                  backgroundColor: animationProps.end.backgroundColor,
                  scale: animationProps.end.scale,
                },
                (progress - 0.5) * 2
              );

              zindex = index;
            }
            console.log(interpolations);
            gsap.set(target, {
              backgroundColor: interpolations.backgroundColor,
              scale: interpolations.scale,
              zIndex: zindex,
            });
          },
          onComplete: () => {
            gsap.set(target, {
              backgroundColor: animationProps.end.backgroundColor,
              scale: animationProps.end.backgroundColor,
              zIndex: index,
              x: animationProps.end.x,
              y: animationProps.end.y,
            });
          },
          ease: "none",
          duration: dur,
        },
        `-=${dur / 2}`
      );
    });
    // tl.pause();
    // const but = document.getElementById("click_me");
    // if (but)
    //   but.onclick = () => {
    //     tl.play();
    //     setTimeout(() => tl.pause(), 500);
    //   };
  }, [cardWidth]);
  return (
    <section
      {...props}
      className={` text-white relative h-[300vh] flex justify-center overflow-hidden items-center w-full z-[2]  bg-transparent`}
    >
      <div
        id="our_services_content"
        className={`absolute w-full -translate-x-1/2 top-0 left-1/2 h-screen py-[5vh] flex justify-center ${getResponsiveClasses()}`}
      >
        <div
          className={`absolute border border-white bottom-[5vh] w-full h-1/2 max-w-5xl overflow`}
          ref={sliderContainerRef}
          id="service_slider"
        >
          <div className="absolute h-full w-1 bg-white left-1/2 -translate-x-1/2"></div>
          {[1, 2, 3, 4, 5, 6, 7].reverse().map((v) => {
            return (
              <div
                key={v}
                style={{
                  width: cardWidth,
                  height: cardWidth,
                  transformOrigin: "bottom center",
                }}
                className="bg-blue-500 service-card bottom-0 left-0 absolute flex justify-center items-center p-10 text-center text-white"
              >
                <span>Don't mind me I am in development {v}</span>
              </div>
            );
          })}
        </div>

        <div
          className={`w-full flex flex-col z-10 justify-between items-start h-full`}
        >
          <div className="flex justify-between gap-6 w-full">
            <div className="basis-1/2 shrink-0">
              <span className="rounded-3xl bg-primary/15 text-primary px-5 py-2 uppercase font-orbit">
                Our Services
              </span>
              <p className="my-5 leading-relaxed text-5xl font-semibold font-orbit">
                Maximize{" "}
                <span className="text-primary inline-block " id="presence_text">
                  digital presence{" "}
                  <span className="ml-2 inline-block w-1 h-9 bg-primary type_cursor"></span>
                </span>{" "}
                with web, marketing, design.
              </p>
            </div>
            <div className="basis-1/2 shrink-0 max-w-96">
              <p className="text-white text-sm font-light pt-10">
                Success is not a destination, it’s a journey. Let us be your
                partner in that journey and help you achieve your digital goals.
                Our expert team of web developers, social media marketers, and
                UI/UX designers are committed to providing you with top-notch
                services that will drive your business forward. With us by your
                side, the sky is the limit. Let’s start this journey together
                and make your digital dreams a reality.
              </p>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
